name: "Register Terraform Cloud Module"
description: "Very quickly made action to register a Terraform Module to a Terraform Cloud Registry"

branding:
  icon: archive
  color: purple

inputs:
  token:
    required: true
    description: "Terraform Cloud API Token with at least \"Manage Modules\" permissions."
  organization:
    required: true
    description: "Name of Terraform Cloud organization"
  namespace:
    required: true
    description: "Name of Terraform Cloud namespace"
  module-name:
    required: true
    description: "Name of module"
  provider-name:
    required: true
    description: "Name of primary provider used by module"
  registry-name:
    required: true
    default: "private"
    description: "Terraform Cloud registry name"

outputs:
  errors:
    description: "Any error that occurred during registration"
    value: ${{ steps.register.outputs.errors }}
  module:
    description: "Module registration JSON"
    value: ${{ steps.register.outputs.module }}
  registered:
    description: "If \"true\", this action registered the module"
    value: ${{ steps.register.outputs.registered }}

runs:
  using: composite
  steps:
    - name: "Ensure jq is installed"
      uses: dcarbone/install-jq-action@v1.0.0

    - name: "Setup"
      id: setup
      shell: bash
      run: |
        _base_url='https://app.terraform.io/api/v2/organizations/${{ inputs.organization }}/registry-modules'
        _register_url="${_base_url}"
        _lookup_url="${_base_url}/${{ inputs.registry-name }}/${{ inputs.namespace }}/${{ inputs.module-name }}/${{ inputs.provider-name }}"
        
        echo "base_url=${_base_url}" >> $GITHUB_OUTPUT
        echo "lookup_url=${_lookup_url}" >> $GITHUB_OUTPUT
        echo "register_url=${_register_url}" >> $GITHUB_OUTPUT

    - name: "Register Module"
      id: register
      shell: bash
      run: |
        # mask token
        echo "::add-mask::${{ inputs.token }}"
        
        # default to "false" here 
        echo "registered=false" >> $GITHUB_OUTPUT
        
        echo "Determining if module \"${{ inputs.module-name }}\" is registered..."
        
        # query for existing module registration
        _lookup_resp="$(curl \
          -s \
          -X GET \
          -H 'Content-Type: application/vnd.api+json' \
          -H "Authorization: Bearer ${{ inputs.token }}" \
          "${{ steps.setup.outputs.lookup_url}}")"
        
        _mod_status="$(echo -n "${_lookup_resp}" | jq -r '.data.attributes.status')"
        
        # test to see if we can find a module status
        # if so, move on
        if [[ "${_mod_status}" != "null" ]]; then
          echo "Module is already registered, moving on"
          echo "module=${_lookup_resp}" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # at this stage we expect to see a 404
        _errs="$(echo -n "${_lookup_resp}" | jq -r '.errors')"
        if [[ "${_errs}" == "null" ]] || [[ "$(echo -n "${_lookup_resp}" | jq -r '.errors[0].status')" != "404" ]]; then
          echo "Expected to see 404, check output \"errors\" for details"
          echo "errors=${_lookup_resp}" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "Module not found in registry, attempting to register..."
        
        # NOTE: this is most likely where things will fail due to incorrect token permissions
        
        # compile body for register request
        _body="{\"data\":{\"type\":\"registry-modules\",\"attributes\":{\"name\":\"${{ inputs.module-name }}\",\"provider\":\"${{ inputs.provider-name }}\",\"registry-name\":\"${{ inputs.registry-name }}\"}}}"
        
        # execute register call
        _register_resp="$(curl \
          -s \
          -X POST \
          -H 'Content-Type: application/vnd.api+json' \
          -H 'Authorization: Bearer ${{ inputs.token }}' \
          --data-raw "${_body}" \
          ${{ steps.setup.outputs.register_url}})"
        
        # if successful, look for well-known key in response
        _mod_status="$(echo -n "${_register_resp}" | jq -r '.data.attributes.status')"
        if [[ "${_mod_status}" == "null" ]]; then
          echo "Error registering module, check \"errors\" output for details"
          echo "errors=${_register_resp}" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # set register response as "module" output
        echo "module=${_register_resp}" >> $GITHUB_OUTPUT
        
        # flag this action as having registered the module
        echo "registered=true" >> $GITHUB_OUTPUT
        
        echo "Module successfully registered."
